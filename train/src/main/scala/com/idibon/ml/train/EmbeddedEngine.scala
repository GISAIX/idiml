package com.idibon.ml.train

import com.idibon.ml.alloy.IntentAlloy
import com.idibon.ml.predict.Engine
import com.idibon.ml.feature.FeaturePipeline

import org.apache.spark.mllib.regression.LabeledPoint
import org.json4s._
import org.json4s.native.JsonMethods.parse
import org.json4s.JsonDSL._
import scala.collection.mutable.ListBuffer
import scala.io.Source

class EmbeddedEngine extends Engine {

  def start() = {
    // Train a model
    val pipeline = new FeaturePipeline()

    val pipelineConfig : JObject = (
      "transforms" -> List(
        ("name" -> "convertToIndex") ~ ("class" -> "com.idibon.ml.feature.indexer.IndexTransformer"),
        ("name" -> "convertToTokens") ~ ("class" -> "com.idibon.ml.feature.tokenizer.TokenTransformer"),
        ("name" -> "contentExtractor") ~ ("class" -> "com.idibon.ml.feature.DocumentExtractor"))) ~
      ("pipeline" -> List(
        ("name" -> "$output") ~ ("inputs" -> List("convertToIndex")),
        ("name" -> "convertToIndex") ~ ("inputs" -> List("convertToTokens")),
        ("name" -> "convertToTokens") ~ ("inputs" -> List("contentExtractor")),
        ("name" -> "contentExtractor") ~ ("inputs" -> List("$document"))))

    val alloy = new IntentAlloy()

    val newPipeline = pipeline.load(alloy.reader(), Some(pipelineConfig))

    val doc : JObject = ( "content" -> "colorless green ideas sleep furiously" )

    newPipeline(doc)

    // Load the data generated by idibin/bin/open_source_integration/export_training_to_idiml.rb
    val filename = "/tmp/idiml.txt"
    // Using a loop here because operations can't occur in parallel since the pipeline accumulates index values over time.
    val intentLabeledPoints = new ListBuffer[LabeledPoint]()
    for (line <- Source.fromFile(filename).getLines()) {
      val json = parse(line)

      // Create labeled points
      if (json \ "label" == JString("Intent to Buy")) {
        val featureVector = newPipeline(json.asInstanceOf[JObject]).head
        intentLabeledPoints += LabeledPoint(1.0, featureVector)
      }
    }

    println(s"intentLabeledPoints: $intentLabeledPoints")

    // Save the results
    val test = newPipeline.save(alloy.writer())
    println(s"test: $test")

    // Load them again
    val newPipeline2 = newPipeline.load(alloy.reader(), Some(pipelineConfig))
    val results2 = newPipeline2(doc)
    println(s"results2: $results2")

  }
}

