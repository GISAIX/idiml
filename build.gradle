// Common configuration for all subprojects listed in settings.gradle
apply plugin: 'idea'

// returns true if there are no uncommitted changes to the index
def isClean() {
  "git status --porcelain".execute().text.isEmpty()
}

// returns true if the current HEAD matches a release tag
def isOfficialRelease() {
  def releases = "git tag -l v[0-9]*".execute().text
  def headRef = "git rev-parse HEAD".execute().text.trim()
  def official = false

  releases.eachLine { tag ->
    def tagRef = "git rev-list -n 1 ${tag}".execute().text.trim()
    def test = tagRef == headRef
    official = official || test
  }

  official
}

// generates a version string from the provided raw version number
// by appending -DIRTY or -SNAPSHOT based on the state of the build
// machine relative to Git.
def getVersionString(String baseVersion) {
  def version = baseVersion

  def circleBranch = System.getenv("CIRCLE_BRANCH") ?: ""
  if (circleBranch == "master") circleBranch = ""

  if (!circleBranch.isEmpty()) version += "-${circleBranch}"
  if (!isClean()) version += '-DIRTY'
  if (!isOfficialRelease()) version += '-SNAPSHOT'
  version
}

version = getVersionString("0.1.1")

println "Current Version: ${version}"

subprojects {

  version = parent.version
  apply from: (new File(parent.projectDir, 'maven.gradle')).getAbsolutePath()

  if (project.name.equals("cld2")) {
    // don't include Scala or Spark configuration for the JNI wrapper
    return
  }

  apply plugin: 'scala'

  // Java 8
  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"

  ext {
    scalaVersion = '2.11'
    scalaCompilerBuild = '7'
    sparkVersion = '1.6.0'
    slf4jVersion = '1.7.13'
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    // Use Scala version 2.11
    compile "org.scala-lang:scala-library:${project.ext.scalaVersion}.${project.ext.scalaCompilerBuild}"

    // Scala Parser Combinators
    compile "org.scala-lang:scala-parser-combinators:${project.ext.scalaVersion}.0-M4"

    // Common Spark / Spark MLLib dependencies
    compile("org.apache.spark:spark-core_${project.ext.scalaVersion}:${project.ext.sparkVersion}") {
      // Spark (and its transitive dependencies) aren't the best slf4j
      // citizens; they should only include slf4j-api, but some library
      // is also including log4j and the slf4j minimal-log4j implementation.
      // exclude these dependencies so that logging backends don't conflict
      exclude group: "org.slf4j", module: "slf4j-log4j12"
      exclude group: "log4j"
    }

    compile("org.apache.spark:spark-mllib_${project.ext.scalaVersion}:${project.ext.sparkVersion}") {
      // see comment above about excluding these dependencies
      exclude group: "org.slf4j", module: "slf4j-log4j12"
      exclude group: "log4j"
    }

    // Json 4 Scala (Json4s)
    compile group: 'org.json4s', name: "json4s-native_${project.ext.scalaVersion}", version: '3.3.0'

    // Scala logging (https://github.com/typesafehub/scala-logging),
    compile("com.typesafe.scala-logging:scala-logging_${project.ext.scalaVersion}:3.1.0")

    // SLF4J (http://www.slf4j.org)
    compile "org.slf4j:slf4j-api:${project.ext.slf4jVersion}"

    // Log4j Implemented Over SLF4J
    compile "org.slf4j:log4j-over-slf4j:1.7.13"

    // ICU4J
    compile group: 'com.ibm.icu', name: 'icu4j', version: '56.1'

    // ScalaTest framework
    testCompile "org.scalatest:scalatest_${project.ext.scalaVersion}:2+"

    // mockito framework
    testCompile 'org.mockito:mockito-core:1.10+'

    // Generates an HTML report for tests in ../build/reports/tests/index.html
    testRuntime 'org.pegdown:pegdown:1.1.0'

    // use simple slf4j bindings for testing
    testRuntime "org.slf4j:slf4j-simple:${project.ext.slf4jVersion}"

    runtime "org.slf4j:log4j-over-slf4j:1.7.13"
  }

  // Add a task to every sub-project that downloads the dependencies
  task downloadDependencies {
    doLast {
      configurations.all { it.resolve() }
    }
  }
}
