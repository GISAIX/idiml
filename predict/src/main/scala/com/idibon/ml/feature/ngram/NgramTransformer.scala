package com.idibon.ml.feature.ngram

import org.json4s._
import com.idibon.ml.feature._
import com.idibon.ml.common.Engine
import com.idibon.ml.alloy.Alloy

/** Generic N-gram transformation
  *
  * N-grams are ProductFeatures generated by applying a sliding window of
  * configurable length over an input sequence. This is often used to
  * lift single-word (i.e., unigram) features, such as those generated
  * by {@link com.idibon.ml.feature.bagofwords.BagOfWordsTransformer}
  * into multi-word (2 and 3 are most common) phrases.
  */
class NgramTransformer(min: Int, max: Int) extends FeatureTransformer
    with Archivable[NgramTransformer, NgramTransformerLoader] {

  def apply(input: Seq[Feature[_]]): Seq[ProductFeature] = {
    if (input.length < this.min) {
      Seq[ProductFeature]()
    } else {
      /* only generate N-grams up to the length of the input string, if the string
       * is shorter than the maximum n-gram size */
      (this.min to math.min(this.max, input.length))
        .foldLeft(List[ProductFeature]())((accum, window) => {
        /* pass a sliding window over the input features, and convert each
         * subset to a ProductFeature, and add the list of ProductFeatures
         * to the accumulated set */
        input.sliding(window)
          .map(e => new ProductFeature(e)).toList ++ accum
      })
    }
  }

  def save(writer: Alloy.Writer): Option[JObject] = {
    Some(JObject(List(
      JField("min", JInt(this.min)),
      JField("max", JInt(this.max)))))
  }
}

/** Paired loader class for NgramTransformer instances. */
class NgramTransformerLoader extends ArchiveLoader[NgramTransformer] {

  def load(engine: Engine, reader: Alloy.Reader, config: Option[JObject]) = {
    implicit val formats = DefaultFormats

    val ngramConfig = config.map(_.extract[NgramConfig])

    // by default, generate everything from unigram to trigram features
    new NgramTransformer(ngramConfig.flatMap(_.min).getOrElse(1),
      ngramConfig.flatMap(_.max).getOrElse(3))
  }
}

/** JSON configuration data for the N-gram transform
  *
  * @param min - Minimum length of generated n-grams (default: 1)
  * @param max - Maximum length of generated n-grams (default: 3)
  */
sealed case class NgramConfig(min: Option[Int], max: Option[Int])
