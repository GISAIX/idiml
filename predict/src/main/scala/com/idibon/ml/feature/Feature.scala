import java.io.{DataInputStream, DataOutputStream}
import com.idibon.ml.alloy.Codec

package com.idibon.ml.feature {

  /** Generic interface for textual and machine learning features.
    *
    * A Feature is a typed entity that is typically generated by applying a
    * FeatureTransformer to one or more input Feature instances to generate
    * a more suitable data set for use in machine learning.
    *
    * Every Feature has an internal representation of the data it
    * represents: depending on the specific feature, this may be a String,
    * a Number, a Vector, or even a complex data type like a key-value
    * pair. The Type interface parameter defines the data type for this
    * internal representation.
    */
  trait Feature[+R] {

    /** Returns the internal representation of this feature. */
    def get: R

    /** Returns the internal representation of this feature.
      *
      * Applies a type-safe conversion of the underlying feature
      * representation.
      */
    def getAs[T] = get.asInstanceOf[T]

    /** Stores the feature to an output stream so it may be reloaded later. */
    def save(output: DataOutputStream)

    /** Reloads a previously saved feature */
    def load(input: DataInputStream)
  }

  case class StringFeature(var value: String) extends Feature[String] {
    def get = value
    def save(output: DataOutputStream) { Codec.String.write(output, value) }
    def load(input: DataInputStream) { value = Codec.String.read(input) }
  }
}
