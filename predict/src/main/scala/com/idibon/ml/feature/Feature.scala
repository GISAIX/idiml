package com.idibon.ml.feature

import com.idibon.ml.alloy.Codec

/** Generic interface for textual and machine learning features.
  *
  * A Feature is a typed entity that is typically generated by applying a
  * FeatureTransformer to one or more input Feature instances to generate
  * a more suitable data set for use in machine learning.
  *
  * Every Feature has an internal representation of the data it
  * represents: depending on the specific feature, this may be a String,
  * a Number, a Vector, or even a complex data type like a key-value
  * pair. The Type interface parameter defines the data type for this
  * internal representation.
  *
  * Feature implementations may optionally be extended by the Built trait to
  * support data persistence.
  */
trait Feature[+T] {
  /** Returns the internal representation of this feature. */
  def get: T

  /** Returns a human-readable version of the significant features **/
  def getHumanReadableString: Option[String]
}

/** Simple feature representing raw string text.
  *
  * Each feature represents a bit of text that can be saved and re-loaded.
  */
case class StringFeature(value: String) extends Feature[String]
    with Buildable[StringFeature, StringFeatureBuilder] {

  def get = value

  /** Saves a StringFeature to an output stream */
  def save(output: FeatureOutputStream) {
    Codec.String.write(output, value)
  }

  def getHumanReadableString : Option[String] = {
    value match {
      case null => None
      case s => Some(s)
    }
  }
}

/** Paired builder class for StringFeature */
class StringFeatureBuilder extends Builder[StringFeature] {
  /** Loads a StringFeature from an input stream */
  def build(input: FeatureInputStream) = {
    new StringFeature(Codec.String.read(input))
  }
}
